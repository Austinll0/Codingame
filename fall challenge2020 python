import sys
import math
import numpy as np
import time
from scipy import optimize

# Auto-generated code below aims at helping you parse
# the standard input according to the problem statement.

class Action: #lawsuit
    def __init__(self):
        # action_id: the unique ID of this spell or recipe
        # action_type: in the first league: BREW; later: CAST, OPPONENT_CAST, LEARN, BREW
        # delta_0: tier-0 ingredient change
        # delta_1: tier-1 ingredient change
        # delta_2: tier-2 ingredient change
        # delta_3: tier-3 ingredient change
        # price: the price in rupees if this is a potion
        # tome_index: in the first two leagues: always 0; later: the index in the tome if this is a tome spell, equal to the read-ahead tax
        # tax_count: in the first two leagues: always 0; later: the amount of taxed tier-0 ingredients you gain from learning this spell
        # castable: in the first league: always 0; later: 1 if this is a castable player spell
        # repeatable: for the first two leagues: always 0; later: 1 if this is a repeatable player spell
        
        action_id, action_type, delta_0, delta_1, delta_2, delta_3, price, tome_index, tax_count, castable, repeatable = input().split()
        self.action_id = int(action_id)
        self.action_type = action_type
        self.delta = [int(delta_0), int(delta_1) , int(delta_2), int(delta_3)]
        self.price = int(price)
        self.tome_index = int(tome_index)
        self.tax_count = int(tax_count)
        self.castable = castable != "0"
        self.repeatable = repeatable != "0"

    def cast(self,numTimes):
        # in the first league: BREW <id> | WAIT; later: BREW <id> | CAST <id> [<times>] | LEARN <id> | REST | WAIT
        print("Debug messages...", file=sys.stderr, flush=True)
        if not self.repeatable:
            numTimes = 1
        print(self.action_type + " %d %d" % (self.action_id, numTimes))
    
    def findCast(self,witch,spells):
        m = len(spells) + 4
        n = len(spells)
        A = np.zeros((m,n))
        
        B = np.zeros(m)
        C = np.ones(n)
        for i in range(n):
            A[i][i] = -1
            for j in range(4):
                A[n+j][i] = -spells[i].delta[j]

        for i in range(4):
            B[n+i] = self.delta[i] + witch.inv[i]

        X = optimize.linprog(C,A,B,method="simplex").x
        return turnSet(X,spells)
        

        
class turnSet:
    def __init__(self,X,spells):
        self.X = X
        self.spells = spells
        self.turns = 0
        for x in X:
            self.turns = self.turns + (x>0) * (2*x - 1)



class Witch:
    def __init__(self):
        # inv_0: tier-0 ingredients in inventory
        # score: amount of rupees
        inv_0, inv_1, inv_2, inv_3, score = [int(j) for j in input().split()]
        self.inv = [inv_0, inv_1, inv_2, inv_3]
        self.score = score

    def canCast(self,action):
        
        if(action.action_type == "CAST"):
            if(not action.castable):
                return False

        for i in range(4):
            if(self.inv[i] + action.delta[i] < 0):
                return False

        return True
    def printInv(self):
        print("inv: %i %i %i %i" % (self.inv[0],self.inv[1],self.inv[2],self.inv[3]), file=sys.stderr, flush=True)
    
    

def findVector(Base,Cost):
    return np.linalg.inv(Base).dot(Cost)

def turnsToCast(Vector,spells):
    turns = 0
    for i in range(len(Vector)):
        if spells[i].repeatable:
            if Vector[i] > 0:
                turns = turns + 1
        elif Vector[i] > 0:
            turns = turns + Vector[i]
    turns = turns + max(Vector)
    return turns

# game loop
while True:
    start = time.time()
    action_count = int(input())  # the number of spells and recipes in play
    witches = []
    potions = []
    spells = []
    learn = []

    for i in range(action_count):
        a = Action()
        if a.action_type == "CAST":
            spells.append(a)
        elif a.action_type == "BREW":
            potions.append(a)
        elif a.action_type == "LEARN":
            learn.append(a)

            

    for i in range(2):
        witches.append(Witch())
        

    # Write an action using print
    # To debug: print("Debug messages...", file=sys.stderr, flush=True)
    target = potions[0]
    for p in potions:
        if p.price > target.price:
            target = p


    if witches[0].canCast(target):
        target.cast(1)
    else:
        turns = target.findCast(witches[0],spells)
        for l in learn:
            if time.time() - start > 0.04:
                break
            temp = [l]
            temp.extend(spells)
            temp = target.findCast(witches[0],temp)
            if temp.turns + 1< turns.turns:
                turns = temp

        if turns.spells[0].action_type =="LEARN":
            turns.spells[0].cast(1)
        else:
            done = False
            print(turns.X, file=sys.stderr, flush=True)
            for i in range(len(turns.X)):
                if turns.X[i] > 0 and witches[0].canCast(spells[i]):
                    spells[i].cast(1)
                    done = True
                    break
            if not done:
                print("REST")

    
    
