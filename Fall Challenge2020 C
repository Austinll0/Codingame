#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <stdbool.h>

/**
 * Auto-generated code below aims at helping you parse
 * the standard input according to the problem statement.
 **/
struct Witch;
struct Action;

bool canCast(struct Witch w, struct Action p);
void cast(struct Action a);
void loadActions(struct Action **potions, struct Action **Spell, int *potion_count, int *spell_count);
bool findCast(struct Witch w , struct Action a, struct Action *spells, int spell_count);

struct Witch {
    int inv[4];
    int score;
};
struct Action { 
    int id;
    char action_type[21];
    int ingredients[4];
    int price;
    bool castable;
};

int main()
{
    struct Witch *witch = malloc(2 * sizeof(struct Witch));
    struct Action *potions;
    struct Action *spells;
    int potion_Count = 5;
    int spell_Count = 0;

    

    // game loop
    while (1) {
        // the number of spells and recipes in play
        loadActions(&potions, &spells, &potion_Count, &spell_Count);
        
        for (int i = 0; i < 2; i++) {
            // tier-0 ingredients in inventory
            int inv_0;
            int inv_1;
            int inv_2;
            int inv_3;
            // amount of rupees
            int score;
            scanf("%d%d%d%d%d", &inv_0, &inv_1, &inv_2, &inv_3, &score);

            int temp[] = { inv_0, inv_1, inv_2, inv_3 };
            memcpy(witch[i].inv, temp, sizeof temp);

            witch[i].score = score;
        }
        fprintf(stderr,"inv:");
        for(int i = 0; i < 4; i++){
            fprintf(stderr," %i",witch[0].inv[i]);
        }
        fprintf(stderr,"\n");
        // Write an action using printf(). DON'T FORGET THE TRAILING \n
        // To debug: fprintf(stderr, "Debug messages...\n");

        int target = 0;
        for(int i = 1; i < potion_Count; i++){
            //fprintf(stderr,"%i\n",potions[i].id);
            if(potions[i].price > potions[target].price){
                target = i;
            }
        }
        if(canCast(witch[0],potions[target])){
            cast(potions[target]);
        }
        else{
            if(!findCast(witch[0],potions[target],spells,spell_Count)){
                printf("REST\n");
            }
        }

        free(potions);
        free(spells);
    }

    return 0;
}


bool canCast(struct Witch w, struct Action a){
    // this boolean is weird. strcmp returns 0 if true so
    // cast if it's not on cooldown and if it's not a potion
    if(!a.castable && strcmp(a.action_type, "BREW")){return false;}
    for(int i = 0; i < 4; i++){
        if(w.inv[i] + a.ingredients[i] < 0){return false;}
    }
    return true;
}

void cast(struct Action a){
    printf("%s %i\n",a.action_type,a.id);
}

void findConstants(struct Witch w, struct Action a, struct Action *spells, int spellCount){
    
}

bool findCast(struct Witch w , struct Action a, struct Action *spells, int spell_count){
    fprintf(stderr,"check %i\n",a.id);
    for(int i = 0; i < 4; i++){
        fprintf(stderr,"%i %i\n",w.inv[i],a.ingredients[i]);
        if(w.inv[i] + a.ingredients[i] < 0){
            for(int j = 0; j < spell_count; j++){
                if(w.inv[i] + spells[j].ingredients[i] > w.inv[i]){
                    if(canCast(w,spells[j])){
                        cast(spells[j]);
                        return true;
                    }
                    else if(findCast(w, spells[j],spells,spell_count)){
                        return true;
                    }
                }
            }
        }
    }
    fprintf(stderr,"end %i\n",a.id);
    return false;
}
void loadActions(struct Action **potions, struct Action **spells, int *potion_count, int *spell_count){
        int action_count;
        struct Action *actions;
        scanf("%d", &action_count);
        actions = malloc(action_count * sizeof(struct Action));
        for (int i = 0; i < action_count; i++) {
            // the unique ID of this spell or recipe
            int action_id;
            // in the first league: BREW; later: CAST, OPPONENT_CAST, LEARN, BREW
            char action_type[21];
            // tier-0 ingredient change
            int delta_0;
            // tier-1 ingredient change
            int delta_1;
            // tier-2 ingredient change
            int delta_2;
            // tier-3 ingredient change
            int delta_3;
            // the price in rupees if this is a potion
            int price;
            // in the first two leagues: always 0; later: the index in the tome if this is a tome spell, equal to the read-ahead tax
            int tome_index;
            // in the first two leagues: always 0; later: the amount of taxed tier-0 ingredients you gain from learning this spell
            int tax_count;
            // in the first league: always 0; later: 1 if this is a castable player spell
            bool castable;
            // for the first two leagues: always 0; later: 1 if this is a repeatable player spell
            bool repeatable;
            int _castable;
            int _repeatable;
            scanf("%d%s%d%d%d%d%d%d%d%d%d", &action_id, action_type, &delta_0, &delta_1, &delta_2, &delta_3, &price, &tome_index, &tax_count, &_castable, &_repeatable);
            castable = _castable;
            repeatable = _repeatable;
            if(strcmp(action_type,"CAST")){*spell_count = *spell_count + 1;}
            actions[i].id = action_id;
            actions[i].price = price;
            actions[i].castable = castable;
            int temp[] = { delta_0, delta_1, delta_2, delta_3 };
            memcpy(actions[i].ingredients, temp, sizeof temp);
            memcpy(actions[i].action_type, action_type, sizeof(action_type));
        }
        struct Action *tempPotions = malloc(*potion_count * sizeof(struct Action));
        struct Action *tempSpells = malloc(*spell_count * sizeof(struct Action));
        int potNum = 0;
        int spellNum = 0;
        for(int i = 0; i < action_count; i++){
            if(!strcmp(actions[i].action_type,"BREW")){
                memcpy(&tempPotions[potNum],&actions[i],sizeof(struct Action));
                potNum++;
            }
            else if(!strcmp(actions[i].action_type,"CAST")){
                memcpy(&tempSpells[spellNum],&actions[i],sizeof(struct Action));
                spellNum++;
            }
        }  
        *potions = tempPotions;
        *spells = tempSpells;
        free(actions);
}
